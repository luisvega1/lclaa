{"version":3,"sources":["components/Layout/ContentWrapper.js","store/reducers/FormValidator.js","components/Common/ImageCropper.js","components/Speakers/Speakers.js"],"names":["ContentWrapper","props","className","unwrap","children","defaultProps","FormValidator","validate","element","isCheckbox","type","value","checked","name","Error","param","getAttribute","validations","JSON","parse","result","length","forEach","m","validator","isEmpty","isEmail","isNumeric","isInt","isAlphanumeric","isURL","value2","document","getElementById","equals","isLength","min","max","toInt","list","isIn","bulkValidate","inputs","errors","hasError","input","Object","keys","some","val","ImageCropper","imageGetter","user","useState","modal","setModal","src","selectFile","image","setImage","aspect","unit","width","height","ruleOfThirds","crop","setCrop","toggle","handleFileChange","e","target","file","URL","createObjectURL","files","setDefaultImages","FILES_ENDPOINT","useEffect","xl","size","offset","heigth","alt","htmlFor","title","id","accept","onChange","isOpen","onImageLoaded","color","onClick","canvas","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","base64image","toDataURL","withNamespaces","setUser","speaker","description","job","banner","avatar","newSpeakerForm","setNewSpeakerForm","validateOnChange","event","form","hasErrors","formName","inputName","method","getImage","submitNewSpeaker","a","preventDefault","elements","filter","i","includes","nodeName","newSpeaker","then","response","error","Swal","icon","text","data","message","console","log","sessionStorage","getItem","xs","onSubmit","row","invalid","data-validate"],"mappings":"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","file":"static/js/4.4115d164.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Wrapper element for template content\r\n */\r\nconst ContentWrapper = props =>(\r\n    <div className=\"content-wrapper\">\r\n        {props.unwrap ?\r\n            (<div className=\"unwrap\">{props.children}</div>)\r\n            :\r\n            (props.children)\r\n        }\r\n    </div>\r\n)\r\n\r\nContentWrapper.propTypes = {\r\n    /** add element with 'unwrap' class to expand content area */\r\n    unwrap: PropTypes.bool\r\n}\r\nContentWrapper.defaultProps = {\r\n    unwrap: false\r\n}\r\n\r\nexport default ContentWrapper;\r\n","// https://github.com/chriso/validator.js\r\nimport validator from 'validator';\r\n\r\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\r\nconst FormValidator = {\r\n    /**\r\n     * Validate input element\r\n     * @param element Dome element of the input\r\n     * Uses the following attributes\r\n     *     data-validate: array in json format with validation methods\r\n     *     data-param: used to provide arguments for certain methods.\r\n     */\r\n    validate(element) {\r\n\r\n        const isCheckbox = element.type === 'checkbox';\r\n        const value = isCheckbox ? element.checked : element.value;\r\n        const name = element.name;\r\n\r\n        if (!name) throw new Error('Input name must not be empty.');\r\n\r\n        // use getAttribute to support IE10+\r\n        const param = element.getAttribute('data-param');\r\n        const validations = JSON.parse(element.getAttribute('data-validate'));\r\n\r\n        let result = []\r\n        if(validations && validations.length) {\r\n            /*  Result of each validation must be true if the input is invalid\r\n                and false if valid. */\r\n            validations.forEach(m => {\r\n                switch (m) {\r\n                    case 'required':\r\n                        result[m] = isCheckbox ? value === false : validator.isEmpty(value)\r\n                        break;\r\n                    case 'email':\r\n                        result[m] = !validator.isEmail(value)\r\n                        break;\r\n                    case 'number':\r\n                        result[m] = !validator.isNumeric(value)\r\n                        break;\r\n                    case 'integer':\r\n                        result[m] = !validator.isInt(value)\r\n                        break;\r\n                    case 'alphanum':\r\n                        result[m] = !validator.isAlphanumeric(value)\r\n                        break;\r\n                    case 'url':\r\n                        result[m] = !validator.isURL(value)\r\n                        break;\r\n                    case 'equalto':\r\n                        // here we expect a valid ID as param\r\n                        const value2 = document.getElementById(param).value;\r\n                        result[m] = !validator.equals(value, value2)\r\n                        break;\r\n                    case 'minlen':\r\n                        result[m] = !validator.isLength(value, { min: param })\r\n                        break;\r\n                    case 'maxlen':\r\n                        result[m] = !validator.isLength(value, { max: param })\r\n                        break;\r\n                    case 'len':\r\n                        const [min, max] = JSON.parse(param)\r\n                        result[m] = !validator.isLength(value, { min, max })\r\n                        break;\r\n                    case 'min':\r\n                        result[m] = !validator.isInt(value, { min: validator.toInt(param) })\r\n                        break;\r\n                    case 'max':\r\n                        result[m] = !validator.isInt(value, { max: validator.toInt(param) })\r\n                        break;\r\n                    case 'list':\r\n                        const list = JSON.parse(param)\r\n                        result[m] = !validator.isIn(value, list)\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unrecognized validator.');\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Bulk validation of input elements.\r\n     * Used with form elements collection.\r\n     * @param  {Array} inputs Array for DOM element\r\n     * @return {Object}       Contains array of error and a flag to\r\n     *                        indicate if there was a validation error\r\n     */\r\n    bulkValidate(inputs) {\r\n        let errors = {},\r\n            hasError = false;\r\n\r\n        inputs.forEach(input => {\r\n            let result = this.validate(input)\r\n            errors = { ...errors, [input.name]: result }\r\n            if (!hasError) hasError = Object.keys(result).some(val => result[val])\r\n        })\r\n\r\n        return {\r\n            errors,\r\n            hasError\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormValidator;","import React, { useState, useEffect } from 'react';\nimport { FILES_ENDPOINT } from '../../services/Services';\nimport ReactCrop from 'react-image-crop';\nimport { Row,  Col, Input, Container, Modal, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nconst ImageCropper = ({type, user, imageGetter}) => {\n\n    const [modal, setModal] = useState(false);\n    const [src, selectFile] = useState(null);\n    const [image, setImage] = useState(null);\n    const [crop, setCrop] = useState({\n        aspect: type === 'avatar' ? 1/1 : 16/9,\n        unit: 'px',\n        width: type === 'avatar' ? 400 : 650,\n        height: type === 'avatar' ? 400 : 350,\n        ruleOfThirds: true\n    });\n\n    //PARA ABRIR Y CERRAR MODAL DEL CROP\n    const toggle = () => setModal(!modal);\n\n    //PARA SELECCIONAR IMAGEN Y SETEARLA EN EL CROPPER\n    const handleFileChange = e => {\n        //VALIDA SI EL USUARIO NO SELECCIONO ALGUN ARCHIVO\n        if(e.target.value.length > 0){\n            const file = URL.createObjectURL(e.target.files[0]);\n            selectFile(file);\n            toggle()\n        }\n    }\n\n    //CROPPER PARA IMAGEN\n    const cropHandler = (e) => {\n        setCrop(e)\n    }\n\n    //PONER IMAGENES DEFAULT DEL USUARIO (LAS QUE YA TIENE)\n    const setDefaultImages = () => {\n        type === 'avatar' ? setImage(`${FILES_ENDPOINT}/images/original/missing.png`) : setImage(`${FILES_ENDPOINT}/images/original/missing.png`);\n    }\n\n    useEffect( () =>{\n        setDefaultImages();\n    }, []);\n\n    //OBTIENE LA IMAGEN YA RECORTADA\n    const getCroppedImg = () => {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n      \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height,\n        );\n\n        const base64image = canvas.toDataURL('image/png');\n        setImage(base64image);\n        imageGetter(base64image, type);\n        toggle();\n    }\n\n    //CIERRA MODAL AL CANCELAR Y RESETEA VALORES\n    const closeModal = () => {\n        toggle();\n        setDefaultImages();\n        selectFile(null);\n    }\n\n    return (\n        <Container>\n            {\n                type === 'avatar' ? (\n                <Row>\n                    <Col xl={{size: 6, offset: 3}}  className=\"d-flex flex-column align-items-center\">\n                        <h2>{type === 'avatar' ? 'Imagen del speaker' : 'Banner'}</h2>\n                        <img src={image} className={type === 'avatar' ? 'img-fluid rounded-circle shadow mb-3' : 'img-fluid rounded shadow mb-3'} width={type === 'avatar' ? 400 : 650} heigth={type === 'avatar' ? 400 : 350} alt=\"avatar\" />\n                        <label htmlFor=\"inputImage\" title=\"Upload image file\" className=\"btn btn-info btn-upload shadow\">\n                            <Input id=\"inputImage\" name=\"file\" type=\"file\" accept=\"image/*\" className=\"sr-only\" onChange={handleFileChange} />\n                            <span title=\"Import image with Blob URLs\" className=\"docs-tooltip\">\n                                Elegir imagen\n                            </span>\n                        </label>\n                    </Col>\n                </Row>):(\n                <Row>\n                    <Col xl={{size: 6, offset: 3}}  className=\"d-flex flex-column align-items-center\">\n                        <h2>{type === 'avatar' ? 'Imagen del speaker' : 'Banner'}</h2>\n                        <img src={image} className={type === 'avatar' ? 'img-fluid rounded-circle shadow mb-3' : 'img-fluid rounded shadow mb-3'} width={type === 'avatar' ? 400 : 650} heigth={type === 'avatar' ? 400 : 350} alt=\"banner\" />\n                        <label htmlFor=\"inputBanner\" title=\"Upload image file\" className=\"btn btn-info btn-upload shadow\">\n                            <Input id=\"inputBanner\" name=\"file\" type=\"file\" accept=\"image/*\" className=\"sr-only\" onChange={handleFileChange} />\n                            <span title=\"Import image with Blob URLs\" className=\"docs-tooltip\">\n                                Elegir imagen\n                            </span>\n                        </label>\n                    </Col>\n                </Row>)\n            }\n            {/* Crop Modal */}\n            <Modal isOpen={modal} toggle={toggle} size='lg' >\n                <ModalBody className=\"text-center\">\n                    {src && (\n                        <ReactCrop className=\"img-fluid\" src={src} onImageLoaded={setImage} crop={crop} onChange={cropHandler} />\n                    )}\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" className=\"shadow\" onClick={getCroppedImg}>Aceptar</Button>\n                    <Button color=\"danger\" className=\"shadow\" onClick={closeModal}>Cancelar</Button>\n                </ModalFooter>\n            </Modal>\n            {/* Crop Modal End*/}\n        </Container>\n    )\n}\n\nexport default ImageCropper;","import React, { useState, useEffect } from \"react\";\r\nimport ImageCropper from \"../Common/ImageCropper\";\r\nimport ContentWrapper from \"../Layout/ContentWrapper\";\r\nimport FormValidator from '../../store/reducers/FormValidator';\r\nimport { newSpeaker } from '../../services/Services';\r\nimport { withNamespaces } from \"react-i18next\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Input,\r\n  CardHeader,\r\n} from \"reactstrap\";\r\nimport Swal from 'sweetalert';\r\n\r\nconst Speaker = (props) => {\r\n\r\n    const [user, setUser] = useState(null);\r\n    //FORM DEL SPEAKER\r\n    const [newSpeakerForm, setNewSpeakerForm] = useState({\r\n        speaker: {\r\n            name: '',\r\n            description: '',\r\n            job: '',\r\n            banner: '',\r\n            avatar: ''\r\n        },\r\n        errors: {}\r\n    });\r\n\r\n    //HACE LA VALIDACION DE LOS CAMPOS CADA QUE SE TECLEA\r\n    const validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form;\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n        const result = FormValidator.validate(input);\r\n\r\n        setNewSpeakerForm({\r\n            speaker: {\r\n                ...newSpeakerForm.speaker,\r\n                [input.name]: value,\r\n            },\r\n            errors: {\r\n                ...newSpeakerForm.errors,\r\n                [input.name]: result\r\n            }\r\n        });\r\n    }\r\n\r\n    //VERIFICA SI HAY ERRORES\r\n    const hasErrors = (formName, inputName, method) => {\r\n        return  newSpeakerForm &&\r\n                newSpeakerForm.errors &&\r\n                newSpeakerForm.errors[inputName] &&\r\n                newSpeakerForm.errors[inputName][method]\r\n    }\r\n\r\n    //METODO PARA OBTENER IMAGENES DEL COMPONENTE ImageCropper\r\n    const getImage = (image, type) =>{\r\n      setNewSpeakerForm({\r\n        speaker: {\r\n          ...newSpeakerForm.speaker,\r\n          [type]: image\r\n        }\r\n      });\r\n    }\r\n\r\n    //ENVIAR REQUEST\r\n    const submitNewSpeaker = async (e) => {\r\n      e.preventDefault()\r\n\r\n      const form = e.target;\r\n      const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName));\r\n      const { errors } = FormValidator.bulkValidate(inputs)\r\n\r\n      setNewSpeakerForm({\r\n            [form.name]: {\r\n                ...newSpeakerForm[form.name]\r\n            },\r\n            errors\r\n        });\r\n\r\n        //Validate if is valid make api request\r\n        await newSpeaker(newSpeakerForm).then( async (response) => {\r\n            if(!response.error){\r\n                console.log(response);\r\n            }else{\r\n                Swal({\r\n                    title: '¡Alerta!',\r\n                    icon: 'warning',\r\n                    text: response.data.message\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    //SE EJECUTA AL INICIAR\r\n    useEffect( () => {\r\n        const user = JSON.parse(sessionStorage.getItem(\"USERSESSION\"));\r\n        setUser(user);\r\n    }, [])\r\n\r\n  return (\r\n      \r\n    <ContentWrapper>\r\n      <div className=\"content-heading\">\r\n        <div>Speaker</div>\r\n      </div>\r\n      <Row>\r\n        <Col xs={12} className=\"text-center\">\r\n          <Card className=\"p-3 shadow\">\r\n            <CardHeader className=\"text-left mb-4\">Nuevo Speaker</CardHeader>\r\n            <CardBody>\r\n              <form className=\"form-horizontal\" name=\"speaker\" onSubmit={submitNewSpeaker}>\r\n                <Row>\r\n                  <Col xl={6}>\r\n                    <FormGroup row>\r\n                      <label className=\"col-xl-4 col-form-label\">Nombre</label>\r\n                      <div className=\"col-xl-8\">\r\n                        <Input onChange={validateOnChange} type=\"text\" name=\"name\" invalid={hasErrors('speaker', 'name','required')} data-validate='[\"required\"]' />\r\n                        { hasErrors('speaker','name','required') && <span className=\"invalid-feedback\">Campo requerido</span> }\r\n                      </div>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col xl={6}>\r\n                    <FormGroup row>\r\n                      <label className=\"col-xl-4 col-form-label\">Puesto</label>\r\n                      <div className=\"col-xl-8\">\r\n                        <Input onChange={validateOnChange} type=\"text\" name=\"job\" invalid={hasErrors('speaker', 'job','required')} data-validate='[\"required\"]' />\r\n                        { hasErrors('speaker','job','required') && <span className=\"invalid-feedback\">Campo requerido</span> }\r\n                      </div>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col xl={6}>\r\n                    <FormGroup row>\r\n                      <label className=\"col-xl-4 col-form-label\">\r\n                        Descripción\r\n                      </label>\r\n                      <div className=\"col-xl-8\">\r\n                        <Input onChange={validateOnChange} type=\"textarea\" name=\"description\" invalid={hasErrors('speaker', 'description','required')} data-validate='[\"required\"]' />\r\n                        { hasErrors('speaker','description','required') && <span className=\"invalid-feedback\">Field is required</span> }\r\n                      </div>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                  <Col xl={5}>\r\n                    <ImageCropper imageGetter={getImage} id=\"av\" type=\"avatar\" user={user} />\r\n                  </Col>\r\n                  <Col xl={7}>\r\n                    <ImageCropper imageGetter={getImage} id=\"ban\" type=\"banner\" user={user} />\r\n                  </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                  <Col xl={12} className=\"d-flex flex-row justify-content-end\">\r\n                    <Button type=\"submit\" color=\"primary\" className=\"shadow\">Guardar</Button>\r\n                  </Col>\r\n                </Row>\r\n              </form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </ContentWrapper>\r\n  );\r\n};\r\n\r\nexport default withNamespaces(\"translations\")(Speaker);\r\n"],"sourceRoot":""}