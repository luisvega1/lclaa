{"version":3,"sources":["store/reducers/FormValidator.js","pages/Login.js"],"names":["FormValidator","validate","element","isCheckbox","type","value","checked","name","Error","param","getAttribute","validations","JSON","parse","result","length","forEach","m","validator","isEmpty","isEmail","isNumeric","isInt","isAlphanumeric","isURL","value2","document","getElementById","equals","isLength","min","max","toInt","list","isIn","bulkValidate","inputs","errors","hasError","input","Object","keys","some","val","Login","state","formLogin","email","password","validateOnChange","event","target","form","setState","onSubmit","e","a","preventDefault","elements","filter","i","includes","nodeName","login","then","response","error","auth","data","props","history","push","Swal","title","icon","text","message","formName","inputName","method","className","href","src","alt","this","placeholder","invalid","onChange","data-validate","id","to","Component"],"mappings":"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","file":"static/js/7.52ffbc6e.chunk.js","sourcesContent":["// https://github.com/chriso/validator.js\r\nimport validator from 'validator';\r\n\r\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\r\nconst FormValidator = {\r\n    /**\r\n     * Validate input element\r\n     * @param element Dome element of the input\r\n     * Uses the following attributes\r\n     *     data-validate: array in json format with validation methods\r\n     *     data-param: used to provide arguments for certain methods.\r\n     */\r\n    validate(element) {\r\n\r\n        const isCheckbox = element.type === 'checkbox';\r\n        const value = isCheckbox ? element.checked : element.value;\r\n        const name = element.name;\r\n\r\n        if (!name) throw new Error('Input name must not be empty.');\r\n\r\n        // use getAttribute to support IE10+\r\n        const param = element.getAttribute('data-param');\r\n        const validations = JSON.parse(element.getAttribute('data-validate'));\r\n\r\n        let result = []\r\n        if(validations && validations.length) {\r\n            /*  Result of each validation must be true if the input is invalid\r\n                and false if valid. */\r\n            validations.forEach(m => {\r\n                switch (m) {\r\n                    case 'required':\r\n                        result[m] = isCheckbox ? value === false : validator.isEmpty(value)\r\n                        break;\r\n                    case 'email':\r\n                        result[m] = !validator.isEmail(value)\r\n                        break;\r\n                    case 'number':\r\n                        result[m] = !validator.isNumeric(value)\r\n                        break;\r\n                    case 'integer':\r\n                        result[m] = !validator.isInt(value)\r\n                        break;\r\n                    case 'alphanum':\r\n                        result[m] = !validator.isAlphanumeric(value)\r\n                        break;\r\n                    case 'url':\r\n                        result[m] = !validator.isURL(value)\r\n                        break;\r\n                    case 'equalto':\r\n                        // here we expect a valid ID as param\r\n                        const value2 = document.getElementById(param).value;\r\n                        result[m] = !validator.equals(value, value2)\r\n                        break;\r\n                    case 'minlen':\r\n                        result[m] = !validator.isLength(value, { min: param })\r\n                        break;\r\n                    case 'maxlen':\r\n                        result[m] = !validator.isLength(value, { max: param })\r\n                        break;\r\n                    case 'len':\r\n                        const [min, max] = JSON.parse(param)\r\n                        result[m] = !validator.isLength(value, { min, max })\r\n                        break;\r\n                    case 'min':\r\n                        result[m] = !validator.isInt(value, { min: validator.toInt(param) })\r\n                        break;\r\n                    case 'max':\r\n                        result[m] = !validator.isInt(value, { max: validator.toInt(param) })\r\n                        break;\r\n                    case 'list':\r\n                        const list = JSON.parse(param)\r\n                        result[m] = !validator.isIn(value, list)\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unrecognized validator.');\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Bulk validation of input elements.\r\n     * Used with form elements collection.\r\n     * @param  {Array} inputs Array for DOM element\r\n     * @return {Object}       Contains array of error and a flag to\r\n     *                        indicate if there was a validation error\r\n     */\r\n    bulkValidate(inputs) {\r\n        let errors = {},\r\n            hasError = false;\r\n\r\n        inputs.forEach(input => {\r\n            let result = this.validate(input)\r\n            errors = { ...errors, [input.name]: result }\r\n            if (!hasError) hasError = Object.keys(result).some(val => result[val])\r\n        })\r\n\r\n        return {\r\n            errors,\r\n            hasError\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormValidator;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Input } from 'reactstrap';\r\nimport { login } from '../services/Services';\r\nimport auth from '../auth/auth';\r\nimport FormValidator from '../store/reducers/FormValidator';\r\nimport Swal from 'sweetalert';\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        formLogin: {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n        const result = FormValidator.validate(input);\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                [input.name]: value,\r\n                errors: {\r\n                    ...this.state[form.name].errors,\r\n                    [input.name]: result\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onSubmit = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        const form = e.target;\r\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\r\n\r\n        const { errors } = FormValidator.bulkValidate(inputs)\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        //Validate if is valid make api request\r\n        await login(this.state.formLogin).then( async (response) => {\r\n            if(!response.error){\r\n                await auth.login(response.data);\r\n                this.props.history.push(\"/\");\r\n            }else{\r\n                Swal({\r\n                    title: '¡Alerta!',\r\n                    icon: 'warning',\r\n                    text: response.data.message\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /* Simplify error check */\r\n    hasError = (formName, inputName, method) => {\r\n        return  this.state[formName] &&\r\n                this.state[formName].errors &&\r\n                this.state[formName].errors[inputName] &&\r\n                this.state[formName].errors[inputName][method]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"block-center wd-xl shadow\">\r\n                <div className=\"card card-flat\">\r\n                    <div className=\"card-header text-center\">\r\n                        <a href=\"\">\r\n                            <img className=\"block-center rounded\" src=\"img/lclaa-logo.png\" alt=\"Logo\"/>\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <form className=\"mb-3\" name=\"formLogin\" onSubmit={this.onSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"email\"\r\n                                        name=\"email\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Enter email\"\r\n                                        invalid={this.hasError('formLogin','email','required')||this.hasError('formLogin','email','email')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"email\"]'\r\n                                        // value={}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-envelope\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formLogin','email','required') && <span className=\"invalid-feedback\">Field is required</span> }\r\n                                    { this.hasError('formLogin','email','email') && <span className=\"invalid-feedback\">Field must be valid email</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"password\"\r\n                                        id=\"id-password\"\r\n                                        name=\"password\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Password\"\r\n                                        invalid={this.hasError('formLogin','password','required')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\"]'\r\n                                        // value={}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-lock\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span className=\"invalid-feedback\">Field is required</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"clearfix\">\r\n                                <div className=\"float-right\">\r\n                                    <Link to=\"recover\" className=\"text-muted\">Forgot your password?</Link>\r\n                                </div>\r\n                            </div>\r\n                            <button className=\"btn btn-block btn-primary mt-3 rounded shadow\" type=\"submit\">Login</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}